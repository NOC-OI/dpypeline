:py:mod:`dpypeline.event_consumer.core`
=======================================

.. py:module:: dpypeline.event_consumer.core

.. autoapi-nested-parse::

   Event consumer. Acts as an interface between Akita and the ETL pipeline.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   dpypeline.event_consumer.core.JobProducer
   dpypeline.event_consumer.core.Queue
   dpypeline.event_consumer.core.EventConsumer




.. py:class:: JobProducer

   Bases: :py:obj:`Protocol`

   Job producer interface.

   .. py:method:: produce_jobs(event: Any) -> None

      Produce jobs triggered by an event.



.. py:class:: Queue

   Bases: :py:obj:`Protocol`

   Queue interface.

   .. py:method:: dequeue() -> Any

      Remove and return an event from the queue.


   .. py:method:: peek() -> Any

      Peek first item in the queue withou removing it.


   .. py:method:: get_queue_size() -> int

      Return the size of the queue.



.. py:class:: EventConsumer(queue: Queue, job_producer: JobProducer, worker: threading.Thread = None)

   Event consumer that runs on a thread as a daemon process.

   This event consumer consumes events from an in-memory queue and processes them to produce jobs.

   :ivar _queue: Queue where events are placed.
   :ivar _job_producer: Producer of jobs.
   :ivar _worker, optional: Worker thread that consumes events from the and processes them to produce jobs.


   .. py:method:: _consume_event(event) -> None

      Consume event by producing jobs.

      :param event: Event representing file or directory creation, deletion, modification or moving.


   .. py:method:: _run_worker(sleep_time: int = 1) -> None

      Run the worker thread.

      Callback function to be used as a target by Thread.

      :param sleep_time: Sleep time in seconds for which the thread is idle.


   .. py:method:: _create_worker(daemon: bool = True) -> threading.Thread

      Create the worker thread.

      :param daemon: If `True`, runs the thread as a daemon; otherwise thread is not created as a daemon.

      :returns: *Worker thread that consumes events from the in-memory queue and processes them to produce jobs.*


   .. py:method:: run() -> None

      Run the event consumer.



