:py:mod:`dpypeline.filesystems.object_store`
============================================

.. py:module:: dpypeline.filesystems.object_store

.. autoapi-nested-parse::

   S3 object store class.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   dpypeline.filesystems.object_store.ObjectStoreS3




.. py:class:: ObjectStoreS3(anon: bool = False, store_credentials_json: str | None = None, secret: str | None = None, key: str | None = None, endpoint_url: str | None = None, *fs_args, **fs_kwargs)

   Bases: :py:obj:`s3fs.S3FileSystem`

   S3 object store.

   :param s3fs: _description_

   .. py:method:: load_store_credentials(path: str) -> dict
      :staticmethod:

      Set the credentials of the object store from a JSON file.

      :param path: Absolute or relative filepath to the JSON file containing the object store credentials.

      :returns: *store_credentials* -- Dictionary containing the values of the `token`, `secret` and `endpoint_url` keys used
                to access the object store.


   .. py:method:: get_remote_options(override: bool = False) -> dict

      Get the remote options of the object store.

      :param override: Flag to create remote_options from scratch (True) or to simply retrieve the current dict (False).

      :returns: *remote_options* -- Dictionary containing the remote options of the object store.


   .. py:method:: get_mapper(bucket: str, prefix: str = 's3://', **get_mapper_kwargs) -> fsspec.mapping.FSMap

      Make a MutableMaping interface to the desired bucket.

      :param bucket: Name of the bucket to place the file in.
      :param prefix: Protocol prefix
      :type prefix: str, default "s3://"
      :param \*\*get_mapper_kwargs: Kwargs for get_mapper. See: https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.get_mapper.

      :returns: *mapper* -- Dict-like key-value store.


   .. py:method:: get_bucket_list() -> list[str]

      Get the list of buckets in the object store.

      :returns: *bucket_list* -- List of the object store buckets.


   .. py:method:: write_file_to_bucket(path: str, bucket: str) -> None

      Write file from the local filesystem to a bucket of the object store.

      :param path: Absolute or relative filepath of the file to be written to the object store.
      :param bucket: Name of the bucket to place the file in.



